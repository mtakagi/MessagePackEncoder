import XCTest
@testable import MsgPackEncoder

extension Keyed : Equatable {
    static func ==(lhs: Keyed, rhs: Keyed) -> Bool {
        if lhs.float.isNaN || lhs.double.isNaN || rhs.float.isNaN || rhs.double.isNaN {
            return lhs.empty == rhs.empty && lhs.bool == rhs.bool && lhs.uint == rhs.uint
                && lhs.uint64 == rhs.uint64 && lhs.uint32 == rhs.uint32 && lhs.uint16 == rhs.uint16
                && lhs.uint8 == rhs.uint8 && lhs.int == rhs.int && lhs.int64 == rhs.int64 && lhs.int32 == rhs.int32
                && lhs.int16 == rhs.int16 && lhs.int8 == rhs.int8
                && lhs.string == rhs.string
        } else {
            return lhs.empty == rhs.empty && lhs.bool == rhs.bool && lhs.uint == rhs.uint
                && lhs.uint64 == rhs.uint64 && lhs.uint32 == rhs.uint32 && lhs.uint16 == rhs.uint16
                && lhs.uint8 == rhs.uint8 && lhs.int == rhs.int && lhs.int64 == rhs.int64 && lhs.int32 == rhs.int32
                && lhs.int16 == rhs.int16 && lhs.int8 == rhs.int8 && lhs.float == rhs.float && lhs.double == rhs.double
                && lhs.string == rhs.string
        }
    }

    static func !=(lhs: Keyed, rhs: Keyed) -> Bool {
        return !(lhs == rhs)
    }
}

class MsgPackEncoderTests: XCTestCase {

    func testEncodeSample() {
        let encoder = MessagePackEncoder()
        let sample = Sample(foo: 127, bar: "Sample", bazz: UInt32.max)
        let result = try! encoder.encode(sample)
        
        XCTAssertEqual(result, Data([0x83, 0xa4, 0x62, 0x61, 0x7a, 0x7a, 0xce, 0xff, 0xff, 0xff, 0xff, 0xa3, 0x66, 0x6f, 0x6f, 0x7f, 0xa3, 0x62, 0x61, 0x72, 0xa6, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65]))
    }

    func testDecodeSample() {
        let decoder = MessagePackDecoder()
        let sample = Sample(foo: 127, bar: "Sample", bazz: UInt32.max)
        let result = try! decoder.decode(Sample.self,
                                         from: Data([0x83, 0xa4, 0x62, 0x61, 0x7a, 0x7a, 0xce, 0xff, 0xff, 0xff, 0xff, 0xa3, 0x66, 0x6f, 0x6f, 0x7f, 0xa3, 0x62, 0x61, 0x72, 0xa6, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65]))

        XCTAssertEqual(result!, sample)
    }

    func testEncodeNested() {
        let encoder = MessagePackEncoder()
        let sample = Sample(foo: 127, bar: "Sample", bazz: UInt32.max)
        let nested = Nested(nested: "Nested", sample: sample)
        let result = try! encoder.encode(nested)

        XCTAssertEqual(result, Data([0x82, 0xa6, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0xa6, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0xa6, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x83, 0xa4, 0x62, 0x61, 0x7a, 0x7a, 0xce, 0xff, 0xff, 0xff, 0xff, 0xa3, 0x66, 0x6f, 0x6f, 0x7f, 0xa3, 0x62, 0x61, 0x72, 0xa6, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65]))
    }

    func testDecodeNested() {
        let decoder = MessagePackDecoder()
        let sample = Sample(foo: 127, bar: "Sample", bazz: UInt32.max)
        let nested = Nested(nested: "Nested", sample: sample)
        let result = try! decoder.decode(Nested.self, from: Data([0x82, 0xa6, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0xa6, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0xa6, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x83, 0xa4, 0x62, 0x61, 0x7a, 0x7a, 0xce, 0xff, 0xff, 0xff, 0xff, 0xa3, 0x66, 0x6f, 0x6f, 0x7f, 0xa3, 0x62, 0x61, 0x72, 0xa6, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65]))

        XCTAssertEqual(result!, nested)
    }

    func testEncodeNestedStruct() {
        let encoder = MessagePackEncoder()
        let nested = NestStruct(nest: "Outer", nested: NestStruct.Nest(nest: "Inner"))
        let result = try! encoder.encode(nested)

        XCTAssertEqual(result, Data([0x82, 0xa4, 0x6e, 0x65, 0x73, 0x74, 0xa5, 0x4f, 0x75, 0x74, 0x65, 0x72, 0xa6, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x81, 0xa4, 0x6e, 0x65, 0x73, 0x74, 0xa5, 0x49, 0x6e, 0x6e, 0x65, 0x72]))
    }

    func testDecodeNestedStruct() {
        let decoder = MessagePackDecoder()
        let nested = NestStruct(nest: "Outer", nested: NestStruct.Nest(nest: "Inner"))
        let result = try! decoder.decode(NestStruct.self, from: Data([0x82, 0xa4, 0x6e, 0x65, 0x73, 0x74, 0xa5, 0x4f, 0x75, 0x74, 0x65, 0x72, 0xa6, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x81, 0xa4, 0x6e, 0x65, 0x73, 0x74, 0xa5, 0x49, 0x6e, 0x6e, 0x65, 0x72]))

        XCTAssertEqual(result, nested)
    }

    func testEncodeUnkeyedStruct() {
        let encoder = MessagePackEncoder()
        let unkeyed = Unkeyed(empty: nil, bool: false, uint: UInt.max, uint64: UInt64.max,
                              uint32: UInt32.max, uint16: UInt16.max, uint8: UInt8.max,
                              int: Int.min, int64: Int64.min, int32: Int32.min, int16: Int16.min,
                              int8: Int8.min, float: Float.infinity, double: Double.nan, string: "Unkeyed")
        let result = try! encoder.encode(unkeyed)

        XCTAssertEqual(result, Data([0x9e, 0xc0, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xce, 0xff, 0xff, 0xff, 0xff, 0xcd, 0xff, 0xff, 0xcc, 0xff, 0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x80, 0x00, 0x00, 0x00, 0xd1, 0x80, 0x00, 0xd0, 0x80, 0xca, 0x7f, 0x80, 0x00, 0x00, 0xcb, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x55, 0x6e, 0x6b, 0x65, 0x79, 0x65, 0x64]))
    }

    func testDecodeUnkeyedStruct() {
        let decoder = MessagePackDecoder()
        let unkeyed = Unkeyed(empty: nil, bool: false, uint: UInt.max, uint64: UInt64.max,
                              uint32: UInt32.max, uint16: UInt16.max, uint8: UInt8.max,
                              int: Int.min, int64: Int64.min, int32: Int32.min, int16: Int16.min,
                              int8: Int8.min, float: Float.infinity, double: Double.nan, string: "Unkeyed")
        let result = try! decoder.decode(Unkeyed.self,
                                         from: Data([0x9e, 0xc0, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xce, 0xff, 0xff, 0xff, 0xff, 0xcd, 0xff, 0xff, 0xcc, 0xff, 0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x80, 0x00, 0x00, 0x00, 0xd1, 0x80, 0x00, 0xd0, 0x80, 0xca, 0x7f, 0x80, 0x00, 0x00, 0xcb, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x55, 0x6e, 0x6b, 0x65, 0x79, 0x65, 0x64]))

        XCTAssertEqual(result!, unkeyed)
    }

    func testEncodeKeyedStruct() {
        let encoder = MessagePackEncoder()
        let keyed = Keyed(empty: nil, bool: false, uint: UInt.max, uint64: UInt64.max,
                              uint32: UInt32.max, uint16: UInt16.max, uint8: UInt8.max,
                              int: Int.min, int64: Int64.min, int32: Int32.min, int16: Int16.min,
                              int8: Int8.min, float: Float.infinity, double: Double.nan, string: "Unkeyed")
        let result = try! encoder.encode(keyed)

        XCTAssertEqual(result, Data([0x8e, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xa7, 0x55, 0x6e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xc2, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0xce, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0xcb, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x69, 0x6e, 0x74, 0x31, 0x36, 0xd1, 0x80, 0x00, 0xa5, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0xca, 0x7f, 0x80, 0x00, 0x00, 0xa3, 0x69, 0x6e, 0x74, 0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x75, 0x69, 0x6e, 0x74, 0x38, 0xcc, 0xff, 0xa5, 0x69, 0x6e, 0x74, 0x33, 0x32, 0xd2, 0x80, 0x00, 0x00, 0x00, 0xa4, 0x75, 0x69, 0x6e, 0x74, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0xcd, 0xff, 0xff, 0xa4, 0x69, 0x6e, 0x74, 0x38, 0xd0, 0x80]))
    }

    func testDecodeKeyedStruct() {
        let decoder = MessagePackDecoder()
        let keyed = Keyed(empty: nil, bool: false, uint: UInt.max, uint64: UInt64.max,
                          uint32: UInt32.max, uint16: UInt16.max, uint8: UInt8.max,
                          int: Int.min, int64: Int64.min, int32: Int32.min, int16: Int16.min,
                          int8: Int8.min, float: Float.infinity, double: Double.nan, string: "Unkeyed")
        let result = try! decoder.decode(Keyed.self,
                                         from: Data([0x8e, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xa7, 0x55, 0x6e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xc2, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0xce, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0xcb, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x69, 0x6e, 0x74, 0x31, 0x36, 0xd1, 0x80, 0x00, 0xa5, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0xca, 0x7f, 0x80, 0x00, 0x00, 0xa3, 0x69, 0x6e, 0x74, 0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x75, 0x69, 0x6e, 0x74, 0x38, 0xcc, 0xff, 0xa5, 0x69, 0x6e, 0x74, 0x33, 0x32, 0xd2, 0x80, 0x00, 0x00, 0x00, 0xa4, 0x75, 0x69, 0x6e, 0x74, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xd3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0xcd, 0xff, 0xff, 0xa4, 0x69, 0x6e, 0x74, 0x38, 0xd0, 0x80]))

        XCTAssertEqual(result!, keyed)
    }

    func testEmptyStruct() {
        let empty = Empty()
        let encoder = MessagePackEncoder()
        let result = try! encoder.encode(empty)
        let data = Data(bytes: [0x80])

        XCTAssertEqual(data, result)
    }

    func testDecodeEmptyStruct() {
        let empty = Empty()
        let decoder = MessagePackDecoder()
        let result = try! decoder.decode(Empty.self, from: Data([0x80]))

        XCTAssertEqual(result!, empty)
    }

    static var allTests = [
        ("testEncodeSample", testEncodeSample),
        ("testDecodeSample", testDecodeSample),
        ("testEncodeNested", testEncodeNested),
        ("testDecodeNested", testDecodeNested),
        ("testEncodeNestedStruct", testEncodeNestedStruct),
        ("testDecodeNestedStruct", testDecodeNestedStruct),
        ("testEncodeUnkeyedStruct", testEncodeUnkeyedStruct),
        ("testDecodeUnkeyedStruct", testDecodeUnkeyedStruct),
        ("testEncodeKeyedStruct", testEncodeKeyedStruct),
        ("testDecodeKeyedStruct", testDecodeKeyedStruct),
        ("testEmptyStruct", testEmptyStruct),
        ("testDecodeEmptyStruct", testDecodeEmptyStruct),
    ]
}
